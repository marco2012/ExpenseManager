{"version":3,"sources":["components/ExpenseListIem.js","selectors/expenses.js","components/ExpenseList.js","components/ExpenseListFilters.js","actions/filters.js","selectors/expenses-total.js","components/ExpensesSummary.js","components/ExpenseForm.js","actions/expenses.js","components/AddExpensePage.js","components/EditExpensePage.js","reducers/expenses.js","reducers/filters.js","App.js","store/configureStore.js","serviceWorker.js","index.js"],"names":["ExpenseListIem","id","description","amount","createdAt","className","to","numeral","format","moment","unix","getVisibleExpenses","expenses","text","sortBy","startDate","endDate","filter","expense","startDateMatch","endDateMatch","textMatch","toLowerCase","includes","sort","a","b","connect","state","filters","props","map","key","ExpenseListFilters","onDatesChange","console","log","type","placeholder","value","this","onChange","event","dispatch","setTextFilter","target","e","React","Component","reduce","sum","visibleExpenses","expenseCount","length","expensesTotal","selectExpensesTotal","ExpenseForm","onDescriptionChange","setState","onNoteChange","note","onAmountChange","match","onDateChange","onSubmit","preventDefault","error","parseFloat","toFixed","valueOf","toString","autoFocus","inputProps","formatDate","parseDate","onDayChange","addExpense","uuid","history","push","find","params","updates","onClick","removeExpense","expenseRedurerDefaultState","expenseReducer","action","filtersRedurerDefaultState","startOf","endOf","filtersReducer","date","store","createStore","combineReducers","window","__REDUX_DEVTOOLS_EXTENSION__","getState","App","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fd16a808.chunk.js","sourcesContent":["import React from \"react\";\nimport {Link} from \"react-router-dom\";\nimport numeral from 'numeral';\nimport moment from 'moment';\n\nconst ExpenseListIem = ({id, description, amount, createdAt}) => {\n    return (\n        <Link className=\"list-item\" to={`/edit/${id}`}>\n            <div className=\"flex-row\">\n                <h3 className=\"list-item__title\">{description}</h3>\n                <span className=\"list-item__subtitle\">€{numeral(amount).format('€0,0.00')}</span>\n            </div>\n            <h3 className=\"list-item__data\">{moment.unix(createdAt).format(\"DD/MM/yy\")}</h3>\n        </Link>\n    )\n};\n\nexport default ExpenseListIem;\n\n","const getVisibleExpenses = (expenses, { text, sortBy, startDate, endDate }) => {\n    return expenses.filter((expense) => {\n        const startDateMatch = typeof startDate !== 'number' || expense.createdAt > startDate;\n        const endDateMatch = typeof endDate !== 'number' || expense.createdAt <= endDate;\n        const textMatch = expense.description.toLowerCase().includes(text.toLowerCase());\n        return startDateMatch && endDateMatch && textMatch;\n    }).sort((a,b) => {\n        if (sortBy === 'date') {\n            return a.createdAt < b.createdAt ? 1 : -1;\n        } else if (sortBy === 'amount') {\n            return a.amount < b.amount ? 1 : -1;\n        }\n        return -1;\n    });\n}\n\nexport default getVisibleExpenses;\n","import React from \"react\";\nimport { connect } from 'react-redux';\nimport ExpenseListIem from \"./ExpenseListIem\";\nimport getVisibleExpenses from \"../selectors/expenses\";\n\nconst ExpenseList = (props) => {\n    return (\n        <div id=\"expenseList\" className=\"content-container\">\n            <div className=\"list-border\">\n                <div className=\"list-header\">\n                    <div className=\"show-for-desktop\">Expense</div>\n                    <div className=\"show-for-desktop\">Amount</div>\n                </div>\n                {props.expenses.map((expense) => {\n                    return <ExpenseListIem key={expense.id} {...expense}/>\n                })}\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        expenses: getVisibleExpenses(state.expenses, state.filters),\n    };\n}\nexport default connect(mapStateToProps)(ExpenseList);\n\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport {setTextFilter, sortByAmount, sortByDate} from \"../actions/filters\";\n\nclass ExpenseListFilters extends React.Component {\n    state = {\n\n    }\n    onDatesChange = ({startDate, endDate}) => {\n        console.log(startDate, endDate)\n    }\n    render() {\n        return (\n            <div className=\"content-container\">\n                <div className=\"input--group\">\n                    <div className=\"input--group__item\">\n                        <input\n                            type=\"text\"\n                            className=\"text-input\"\n                            placeholder=\"Search expenses\"\n                            value={this.props.filters.text}\n                            onChange={(event) => {\n                                this.props.dispatch(setTextFilter(event.target.value));\n                            }}\n                        />\n                    </div>\n                    <div className=\"input--group__item\">\n                        <select\n                            className=\"select\"\n                            value={this.props.filters.sortBy}\n                            onChange={(e) => {\n                                if (e.target.value === 'date') {\n                                    this.props.dispatch(sortByDate())\n                                } else if (e.target.value === 'amount') {\n                                    this.props.dispatch(sortByAmount())\n                                }\n                            }}\n                        >\n                            <option value=\"date\">Date</option>\n                            <option value=\"amount\">Amount</option>\n                        </select>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        filters: state.filters\n    }\n};\n\nexport default connect(mapStateToProps)(ExpenseListFilters);\n","export const setTextFilter = (text='') => ({\n    type: 'SET_TEXT_FILTER',\n    text\n});\n\nexport const sortByAmount = () => ({\n    type: 'SORT_BY_AMOUNT'\n})\n\nexport const sortByDate = () => ({\n    type: 'SORT_BY_DATE'\n})\n\nexport const setStartDate = (date=undefined) => ({\n    type: 'SET_START_DATE',\n    date\n})\n\nexport const setEndDate = (date=undefined) => ({\n    type: 'SET_END_DATE',\n    date\n})\n","export default (expenses) => {\n  return expenses\n      .map((expense) => expense.amount)\n      .reduce((sum, value) => sum + value, 0);\n};\n","import React from \"react\";\nimport numeral from 'numeral';\nimport {connect} from \"react-redux\";\nimport getVisibleExpenses from \"../selectors/expenses\";\nimport selectExpensesTotal from \"../selectors/expenses-total\";\nimport {Link} from \"react-router-dom\";\n\nconst ExpensesSummary = ({expenseCount, expensesTotal}) => {\n    return (\n        <div className=\"page-header\">\n            <div className=\"content-container\">\n                <h1 className=\"page-header__title\">Viewing <span>{expenseCount}</span> {expenseCount === 1 ? 'expense' : 'expenses'} totalling <span>€{numeral(expensesTotal).format('€0,0.00')}</span></h1>\n                <div className=\"page-header__actions\">\n                    <Link className=\"button\" to=\"/create\">Add Expense</Link>\n                </div>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state) => {\n    const visibleExpenses = getVisibleExpenses(state.expenses, state.filters);\n    return {\n        expenseCount: visibleExpenses.length,\n        expensesTotal: selectExpensesTotal(visibleExpenses)\n    }\n}\n\nexport default connect(mapStateToProps)(ExpensesSummary);\n","import React from \"react\";\nimport moment from \"moment\";\nimport DayPickerInput from 'react-day-picker/DayPickerInput';\nimport 'react-day-picker/lib/style.css';\nimport {formatDate, parseDate,} from 'react-day-picker/moment';\nimport \"react-day-picker/lib/style.css\";\n\nclass ExpenseForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            description: props.expense ? props.expense.description : '',\n            note: props.expense ? props.expense.note : '',\n            amount: props.expense ? props.expense.amount.toString() : '',\n            createdAt: props.expense ? moment(props.expense.createdAt) : moment(),\n            error: '',\n        }\n    }\n    onDescriptionChange = (e) => {\n        const description = e.target.value;\n        this.setState(() => ({description}));\n    }\n    onNoteChange = (e) => {\n        const note = e.target.value;\n        this.setState(() => ({note}));\n    }\n    onAmountChange = (e) => {\n        const amount = e.target.value;\n        if (!amount || amount.match(/^\\d+(\\.\\d{0,2})?$/)) {\n            this.setState(() => ({amount}));\n        }\n    }\n    onDateChange = (createdAt) => {\n        if (createdAt) {\n            this.setState(() =>({createdAt: moment(createdAt).unix()}))\n        }\n    }\n    onSubmit = (e) => {\n        e.preventDefault();\n        if (!this.state.description || !this.state.amount) {\n            this.setState(() => ({error: 'Please provide description and amount'}));\n        } else {\n            this.setState(() => ({error: ''}));\n            this.props.onSubmit({\n                description: this.state.description,\n                amount: (parseFloat(this.state.amount)).toFixed(2),\n                createdAt: this.state.createdAt.valueOf(),\n                note: this.state.note,\n            });\n        }\n    }\n\n    render() {\n        return (\n                <form className=\"form\" onSubmit={this.onSubmit}>\n                    {this.state.error && <p className=\"form__error\">{this.state.error}</p>}\n                    <input\n                        className=\"text-input\"\n                        type=\"text\"\n                        placeholder=\"Description\"\n                        autoFocus\n                        value = {this.state.description}\n                        onChange={this.onDescriptionChange}\n                    />\n\n                    <input\n                        className=\"text-input\"\n                        type=\"number\"\n                        placeholder=\"Amount\"\n                        value={this.state.amount}\n                        onChange={this.onAmountChange}\n                    />\n\n                    <DayPickerInput\n                        inputProps={{ className: 'text-input' }}\n                        formatDate={formatDate}\n                        parseDate={parseDate}\n                        value={moment.unix(this.state.createdAt).format(\"MM/DD/YY\")}\n                        onDayChange={this.onDateChange}\n                    />\n\n                    <textarea\n                        className=\"text-input\"\n                        id=\"notes\"\n                        placeholder=\"Add note for yout expense (optional)\"\n                        value={this.state.note}\n                        onChange={this.onNoteChange}\n                    >\n                    </textarea>\n                    <div>\n                        <button className=\"button\">Save Expense</button>\n                    </div>\n                </form>\n        )\n    }\n}\n\nexport default ExpenseForm;\n","import {v1 as uuid} from \"uuid\";\n\nexport const addExpense = ({\n                        description = '',\n                        note = '',\n                        amount=0,\n                        createdAt = 0\n                    } = {}) => ({\n    type: 'ADD_EXPENSE',\n    expense: {\n        id: uuid(),\n        description,\n        note,\n        amount,\n        createdAt\n    }\n});\n\nexport const removeExpense = ({id} = {}) => ({\n    type: 'REMOVE_EXPENSE',\n    id\n});\n\nexport const editExpense = (id, updates) =>({\n    type: 'EDIT_EXPENSE',\n    id,\n    updates\n})\n","import React from \"react\";\nimport ExpenseForm from \"./ExpenseForm\";\nimport {connect} from \"react-redux\";\nimport {addExpense} from \"../actions/expenses\";\n\nconst AddExpensePage = (props) => {\n    return (\n        <div>\n            <div className=\"page-header\">\n                <div className=\"content-container\">\n                    <h1 className=\"page-header__title\">Add expense</h1>\n                </div>\n            </div>\n            <div className=\"content-container\">\n                <ExpenseForm\n                    onSubmit={(expense) => {\n                        props.dispatch(addExpense(expense));\n                        props.history.push('/');\n                    }}\n                />\n            </div>\n        </div>\n    )\n};\n\nexport default connect()(AddExpensePage);\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport ExpenseForm from \"./ExpenseForm\";\nimport {editExpense, removeExpense} from \"../actions/expenses\";\n\nconst EditExpensePage = (props) => {\n    return (\n        <div>\n            <div className=\"page-header\">\n                <div className=\"content-container\">\n                    <h1 className=\"page-header__title\">Edit Epense</h1>\n                </div>\n            </div>\n            <div className=\"content-container\">\n                <ExpenseForm\n                    expense={props.expense}\n                    onSubmit={(expense) => {\n                        props.dispatch(editExpense(props.expense.id, expense));\n                    }}\n                />\n                <button\n                    className=\"button button--secondary\"\n                    onClick={() => {\n                        if (props.expense.id){\n                            props.dispatch(removeExpense({id: props.expense.id}));\n                            props.history.push('/');\n                        }\n                }}>Remove Expense</button>\n            </div>\n        </div>\n    )\n};\n\nconst mapStateToProps = (state, props) => {\n    return {\n        expense: state.expenses.find((expense) => expense.id === props.match.params.id)\n    }\n}\n\nexport default connect(mapStateToProps)(EditExpensePage);\n","const expenseRedurerDefaultState = [];\nconst expenseReducer = (state = expenseRedurerDefaultState, action) => {\n    switch (action.type) {\n        case 'ADD_EXPENSE':\n            return [...state, action.expense];\n        case 'REMOVE_EXPENSE':\n            return state.filter(({id}) => id !== action.id);\n        case 'EDIT_EXPENSE':\n            return state.map((expense) => {\n                if (expense.id === action.id) {\n                    return {\n                        ...expense,\n                        ...action.updates //override expense values with user defined ones\n                    };\n                } else {\n                    return expense;\n                }\n            });\n        default:\n            return state;\n    }\n};\n\nexport default expenseReducer;\n","import moment from 'moment';\n\nconst filtersRedurerDefaultState = {\n    text: '',\n    sortBy: 'date',\n    startDate: moment().startOf('month'),\n    endDate: moment().endOf('month'),\n};\nconst filtersReducer = (state = filtersRedurerDefaultState, action) => {\n    switch (action.type) {\n        case 'SET_TEXT_FILTER':\n            return {\n                ...state,\n                text: action.text\n            }\n        case 'SORT_BY_AMOUNT':\n            return {\n                ...state,\n                sortBy: 'amount'\n            }\n        case 'SORT_BY_DATE':\n            return {\n                ...state,\n                sortBy: 'date'\n            }\n        case 'SET_START_DATE':\n            return {\n                ...state,\n                startDate: action.date\n            }\n        case 'SET_END_DATE':\n            return {\n                ...state,\n                endDate: action.date\n            }\n        default:\n            return state;\n    }\n};\n\nexport default filtersReducer;\n","import \"core-js/stable\";\nimport \"regenerator-runtime/runtime\";\nimport React from 'react';\nimport './App.css';\nimport AppRouter from \"./routers/AppRouter\";\nimport configureStore from \"./store/configureStore\";\nimport {addExpense} from \"./actions/expenses\";\nimport getVisibleExpenses from \"./selectors/expenses\";\nimport {Provider} from 'react-redux';\n\nconst store = configureStore();\n\nstore.dispatch(addExpense({description: 'Water bill', amount: 43.34, createdAt: 1597782775, note: 'expensive'}));\nstore.dispatch(addExpense({description: 'Gas bill', amount: 22.89, createdAt: 1597782775, note: 'needed'}));\nstore.dispatch(addExpense({description: 'Rent', amount: 343.44, createdAt: 1597782775, note: 'great aparment'}));\nstore.dispatch(addExpense({description: 'Netflix', amount: 7, createdAt: 1597782775, note: 'tv shows'}));\n\nconst state = store.getState();\nconst visibleExpenses = getVisibleExpenses(state.expenses, state.filters);\nconsole.log(visibleExpenses)\n\nfunction App() {\n  return (\n      // provides the store to all components of the app\n    <Provider store={store}>\n      <AppRouter/>\n    </Provider>\n  );\n}\n\nexport default App;\n","import {combineReducers, createStore} from \"redux\";\nimport expenseReducer from \"../reducers/expenses\";\nimport filtersReducer from \"../reducers/filters\";\n\nexport default () => {\n    const store = createStore(\n        combineReducers({\n            expenses: expenseReducer,\n            filters: filtersReducer,\n        }),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__() //support redux dev tools\n    );\n    return store;\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}